import React from "react";
import { useEffect, useState } from "react";
import "../scss/list.scss";
import EditIcon from "@mui/icons-material/Edit";
import DeleteForeverIcon from "@mui/icons-material/DeleteForever";
import Box from "@mui/material/Box";
import Tab from "@mui/material/Tab";
import axios from "axios";
import { TabContext, TabList, TabPanel } from "@mui/lab";
const ListToDo = () => {
  const [completedUsers, setCompletedUsers] = useState([]);
  const [users, setUsers] = useState([]);
  useEffect(() => {
    // Fetch data from JSON Server when component mounts
    axios
      .get("http://localhost:3000/users")
      .then((res) => {
        setUsers(res.data);
      })
      .catch((error) => {
        console.error("Error fetching data: ", error);
      });
  }, []);
  const handleSubmit = (e) => {
    e.preventDefault();
    const todo = e.target.todo.value;
    if (!todo) {
      return;
    }
    // Add new user to the JSON Server
    axios
      .post("http://localhost:3000/users", {
        name: todo,
      })
      .then((res) => {
        setUsers([...users, res.data]);
      });
    e.target.todo.value = "";
  };

  const handleDelete = (id) => {
    // Delete user from the JSON Server
    // ask for confirmation before deleting
    if (window.confirm("Do you want to delete this item?")) {
      axios.delete(`http://localhost:3000/users/${id}`).then(() => {
        setUsers(users.filter((user) => user.id !== id));
      });
    }
  };
  const handleEdit = (id) => {
    const newName = prompt("Enter new name");
    if (newName) {
      // Update user in the JSON Server
      axios
        .put(`http://localhost:3000/users/${id}`, {
          name: newName,
        })
        .then(() => {
          setUsers(
            users.map((user) => {
              if (user.id === id) {
                user.name = newName;
              }
              return user;
            })
          );
        });
    }
  };

  const handleComplete = (id) => {
    const completedUser = users.find((user) => user.id === id);
    if (completedUser) {
      // Remove user from users array
      setUsers(users.filter((user) => user.id !== id));

      // Add user to completedUsers array in the local server
      axios
        .post("http://localhost:3000/completedUser", completedUser)
        .then((response) => {
          // The response contains the new item with an id generated by the server
          setCompletedUsers([...completedUsers, response.data]);
        })
        .catch((error) => {
          console.error("Error adding completed user: ", error);
        });
      axios.delete(`http://localhost:3000/users/${id}`).then(() => {
        setUsers(users.filter((user) => user.id !== id));
      });
    }
  };
  const [completedUser, setCompletedUser] = useState([]);

  useEffect(() => {
    axios.get("http://localhost:3000/completedUser").then((response) => {
      setCompletedUser(response.data);
    });
  }, []);
  const [value, setValue] = React.useState("1");

  const handleChange = (event, newValue) => {
    setValue(newValue);
  };

  const handleDeleteDone = (id) => {
    if (window.confirm("Do you want to delete this item?")) {
      axios.delete(`http://localhost:3000/completedUser/${id}`).then(() => {
        setCompletedUser(completedUser.filter((user) => user.id !== id));
      });
    }
  };

  const handleEditDone = (id) => {
    const newName = prompt("Enter new name");
    if (newName) {
      axios
        .put(`http://localhost:3000/completedUser/${id}`, {
          name: newName,
        })
        .then(() => {
          setCompletedUser(
            completedUser.map((user) => {
              if (user.id === id) {
                user.name = newName;
              }
              return user;
            })
          );
        });
    }
  };

  return (
    <div>
      <form className="container" onSubmit={handleSubmit}>
        <h1>Danh sách công việc</h1>
        <div className="container-infor">
          <div className="container-infor-input">
            <input type="text" name="todo" placeholder="Nhập tên công việc" />{" "}
            {/* Change 'name' to 'todo' */}
            <button type="submit">Thêm</button>
          </div>

          <ul>
            <TabContext value={value}>
              <Box sx={{ borderBottom: 1, borderColor: "divider" }}>
                <TabList
                  onChange={handleChange}
                  aria-label="lab API tabs example"
                >
                  <Tab label="Tất cả" value="1" />
                  <Tab label="Đã hoàn thành" value="2" />
                  <Tab label="Chưa hoàn thành" value="3" />
                </TabList>
              </Box>
              <TabPanel value="3">
                {users.map((user) => {
                  return (
                    <li className="container-infor-check" key={user.id}>
                      <div className="check-info">
                        <input
                          type="checkbox"
                          name=""
                          id=""
                          onChange={() => handleComplete(user.id)}
                        />
                        <p>{user.name}</p>
                      </div>
                      <div className="check-icon">
                        <button onClick={() => handleEdit(user.id)}>
                          <EditIcon style={{ color: "orange" }} />
                        </button>
                        <button onClick={() => handleDelete(user.id)}>
                          <DeleteForeverIcon style={{ color: "red" }} />
                        </button>
                      </div>
                    </li>
                  );
                })}
              </TabPanel>
              <TabPanel value="2">
                {completedUser.map((user) => {
                  return (
                    <li className="container-infor-check" key={user.id}>
                      <div className="check-info">
                        <input type="checkbox" checked readOnly />
                        <p>{user.name}</p>
                      </div>
                      <div className="check-icon">
                        <button onClick={() => handleEditDone(user.id)}>
                          <EditIcon style={{ color: "orange" }} />
                        </button>
                        <button onClick={() => handleDeleteDone(user.id)}>
                          <DeleteForeverIcon style={{ color: "red" }} />
                        </button>
                      </div>
                    </li>
                  );
                })}
              </TabPanel>
              <TabPanel value="1">
                {users.map((user) => (
                  <li className="container-infor-check" key={user.id}>
                    <div className="check-info">
                      <input
                        type="checkbox"
                        onChange={() => handleComplete(user.id)}
                      />
                      <p>{user.name}</p>
                    </div>
                    <div className="check-icon">
                      <button onClick={() => handleEdit(user.id)}>
                        <EditIcon style={{ color: "orange" }} />
                      </button>
                      <button onClick={() => handleDelete(user.id)}>
                        <DeleteForeverIcon style={{ color: "red" }} />
                      </button>
                    </div>
                  </li>
                ))}
                {completedUser.map((user) => (
                  <li className="container-infor-check" key={user.id}>
                    <div className="check-info">
                      <input type="checkbox" checked readOnly />
                      <p>{user.name}</p>
                    </div>
                    <div className="check-icon">
                      <button onClick={() => handleEditDone(user.id)}>
                        <EditIcon style={{ color: "orange" }} />
                      </button>
                      <button onClick={() => handleDeleteDone(user.id)}>
                        <DeleteForeverIcon style={{ color: "red" }} />
                      </button>
                    </div>
                  </li>
                ))}
              </TabPanel>
            </TabContext>
          </ul>
        </div>
      </form>
    </div>
  );
};
export default ListToDo;
